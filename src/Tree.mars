model SavannaTrees

use Mars 

raster-layer Temperature as temperature
raster-layer Precipitation as precipitation

layer SavannaLayer

enum TreeAgeGroup { Seed Seedling Juvenile Adult Death }

enum GenderType { Male Female }

enum DamageType { No Light Moderate Heavy Extreme }

agent Tree on SavannaLayer {	
	static var growthBoosterByClimate = 1.0;
	static var SeedlingSurvivalRate : integer // percentage
	
	static var AN = "an" 			// Arkazie
	static var CA = "ca" 			// Combretum apiculatun
	static var SB = "sb" 			// Marula
	static var TT = "tt" 			// Generic tree
	static var ALL_SPECIES = "ALL" 
	
	static var SeedlingsSpawnRatePerYear = 50
	static var DaysPerYear = 365
	static var DaysWithLeaves = 228
	static var E = 2.718281828459045
	static var PI : real = 3.14159265359
    static var EarthRadiusInMeters = 6378100.0;	
	
	external var IsScenario45not85 : bool
	external observe var Species : string
	external observe var StemDiameter : real
	external observe var Raster : string
	
	observe var MyTreeAgeGroup : TreeAgeGroup
	observe var LivingWoodMass : real
	observe var DeadWoodMass : real
	observe var Bark : real	// 1.0 = 100%
	observe var DyingReason : string
	
	var HasLeaves : bool
	var MyDamageType : DamageType
		
	var FirstTickAsSeedling : real
	
	def TreePosition() => return #(xcor, ycor)
		
	initialize {
		MyTreeAgeGroup = TreeAgeGroup.Seed
		MyDamageType = DamageType.No
		Bark = 1.0
		UpdateTreeAgeGroup
		InitWoodMass
		
		if (IsScenario45not85) {
			SeedlingSurvivalRate = 12
			growthBoosterByClimate = 1.0
		} else {
			SeedlingSurvivalRate = 15
			growthBoosterByClimate = 1.3
		}
	}
	
	passive Xcor()  {
		return xcor
	}
	passive Ycor()  {
		return ycor
	}
	
	passive IsTreeAgeGroup(treeAgeGroup: TreeAgeGroup) : bool {
		return MyTreeAgeGroup === treeAgeGroup
	}
	
	passive IsSpecies(species: string) : bool {
		return species === ALL_SPECIES or Species === species
	}	

	passive TakeBark(percent : real) {
		ReduceBarkBy(percent / 100)
		UpdateOnNewBark
	}
	
	def ReduceBarkBy(subtrahend : real) {
		Bark = Bark - subtrahend
	}
	
	def UpdateOnNewBark() {
		if (Bark < 0) {
			Die("RoundBarked")
		} else if (Bark < 0.5) {
			MyDamageType = DamageType.Moderate
		}
	}
	
	passive TakeDeadWoodMass(mass : real) {
		var result : real 
		if (mass < DeadWoodMass) {
			result = mass
		} else {
			result = DeadWoodMass
		}
		DeadWoodMass = DeadWoodMass - result
		
		return result
	}
	
	passive TakePushOver() {
		var result = ReduceLivingWoodMassBy(LivingWoodMass)
		if (RandomPropabilitySmallenThan(50)) {
			Die("PushOver")
		}
		return result
	}
	
	passive TakeDamage(mass : real) {
		return ReduceLivingWoodMassBy(mass)
	}
	
	passive TakeLivingWoodMass(mass : real) {
		return ReduceLivingWoodMassBy(mass)
	}

	def ReduceLivingWoodMassBy(mass : real) {
		var currentLivingWoodMass = CalculateLivingWoodMassByDiameter
		var result : real
		
		if (mass < currentLivingWoodMass) {
			result = mass
		} else {
			result = currentLivingWoodMass
		}
		MyDamageType = CalculateDamageType(result)
		LivingWoodMass = LivingWoodMass - result
				
		StemDiameter = CalculateDiameterByWoodMass
		return result
	}
	
	def CalculateDamageType(result : real) {
		var quota = result / LivingWoodMass
		if (quota > 0.9) {
			return DamageType.Extreme
		} else if (quota > 0.1) {
			return DamageType.Moderate
		}
		return DamageType.No
	}
	
	passive SufferDrought() {
		if (MyTreeAgeGroup !== TreeAgeGroup.Adult and RandomPropabilitySmallenThan(7)) {
			Die("Drought")
		}
	}
	
	passive SufferHerbivorePressure() {
		if (MyTreeAgeGroup === TreeAgeGroup.Juvenile) { //TODO and height < 1.5m
			switch (Species) {
			case AN: { ReduceStemDiameterBy(5) }
			case CA: { ReduceStemDiameterBy(20) }
			case SB: { ReduceStemDiameterBy(30) }
			case TT: { ReduceStemDiameterBy(18) } 
			}
		}
	}
	
	def ReduceStemDiameterBy(percent : real) {
		StemDiameter = StemDiameter - StemDiameter * percent / 100
	}
	
	def UpdatePhotosyntheseActive() { // SUM: 228 days with leaves
		if      (Time::Month(simtime) === 10 and Time::Day(simtime) === 15)
			HasLeaves = true
		else if (Time::Month(simtime) ===  6 and Time::Day(simtime) === 15)
			HasLeaves = false
	}

	def UpdateTreeAgeGroup() {
		if (StemDiameter >= 1) {
			if (IsJuvenileByStemDiameter) {
				MyTreeAgeGroup = TreeAgeGroup.Juvenile
			} else {
				MyTreeAgeGroup = TreeAgeGroup.Adult
			}
		}		
	}
	
	def IsJuvenileByStemDiameter() {
		switch (Species) {
			case AN: { return StemDiameter <  8 }
			case CA: { return StemDiameter < 10 }
			case SB: { return StemDiameter < 20 }
			case TT: { return StemDiameter < 13 } 
		}
	}

	tick {
		UpdateTreeAgeGroup
		UpdatePhotosyntheseActive
		
		if (MyTreeAgeGroup === TreeAgeGroup.Seed) {
			Seed
		} else if (MyTreeAgeGroup === TreeAgeGroup.Seedling) {
			Seedling
		} else if (MyTreeAgeGroup === TreeAgeGroup.Juvenile) {
			Juvenile
		} else if (MyTreeAgeGroup === TreeAgeGroup.Adult) {
			Adult
		}
		
		if(RandomPropabilitySmallenThan(50)) {
			Die("DieForDaniel")//TODO delete
		}
				
		UpdateWoodMass
		
		if (Time::Month(simtime) === 3 and Time::Day(simtime) === 15) {
			ResetDamageType
			ResetBarkBy(30)
		}
	}
	
	def Seed() {	
		if (HasPrecipitation) {		
			if (RandomPropabilitySmallenThan(100 - SeedlingSurvivalRate + random(SeedlingSurvivalRate))) {
				Die("RandomProbability") // 88% - 100% die eventually
			} else if (IsPopulationDensityExceeded) {
				Die("PopulationDensity")
			}
			FirstTickAsSeedling = simtime	
			MyTreeAgeGroup = TreeAgeGroup.Seedling 
		} 	
	}
	
	def Seedling() {	
		if (IsFrozen) {
			Die ("Frozen")
		} else if (IsDried) {
			Die("Dried")
		} else if (MyDamageType !== DamageType.No) {
			Die("Damaged")
		} else if (HasLeaves) {
			GrowSeedling
		} 		
	}
	
	def IsFrozen() : bool {
		if (Species === AN) return false
		
		var tempToday = temperature.GetNumberValue(ycor, xcor)	
		return tempToday < 0 and RandomPropabilitySmallenThan(80)
	}
			
	var seedSurvivedFirst12Days : bool
	
	def IsDried() {
		if (FirstTickAsSeedling + 12 < simtime) {
			seedSurvivedFirst12Days = HasPrecipitation
			return false
		} 
		return not seedSurvivedFirst12Days
	}

	def HasPrecipitation() {
		var precipitationToday = precipitation.GetNumberValue(ycor, xcor)
		return precipitationToday > 1
	}

	def Juvenile() {
		if (HasLeaves) {
			if (MyDamageType !== DamageType.No) {
				GrowResprouting
			} else {
				GrowJuvenile
			}
		} 
	}

	def Adult() {
		if (HasLeaves) {
			if (MyDamageType === DamageType.No) {
				GrowAdult(1)
			} else if (MyDamageType === DamageType.Light) {
				GrowAdult(ReducedTo(90, 100))
			} else if (MyDamageType === DamageType.Moderate) {
				GrowAdult(ReducedTo(70, 90)) 
			} else if (MyDamageType === DamageType.Heavy) {
				GrowAdult(ReducedTo(40, 70))
			} else if (MyDamageType === DamageType.Extreme) {
				GrowResprouting
			}
		} 
		if (Time::Month(simtime) === 3 and Time::Day(simtime) === 15) {
			SpawnSeedlings
		}
	}
	
	def SpawnSeedlings() {
		for (var i = 0; i < SeedlingsSpawnRatePerYear; i++) {
			var seed = spawn Tree at GetRelativePosition(xcor, ycor, random(50), random(360))
			seed.SetSpecies(Species)		
			seed.SetTreeAgeGroup(TreeAgeGroup.Seed)		
			seed.SetRaster(Raster)		
		} 
	}
	
	passive SetSpecies(species : string) {
		Species = species	
	}
	
	passive SetTreeAgeGroup(treeAgeGroup : TreeAgeGroup) {
		MyTreeAgeGroup = treeAgeGroup
	}
	
	passive SetRaster(raster : string) {
		Raster = raster
	}
		
	def GrowSeedling() {
		StemDiameter = StemDiameter + 1d / DaysWithLeaves
	}
	
	def GrowResprouting() {
		GrowJuvenile
	}
	
	def GrowJuvenile() {
		switch (Species) {
			case AN: { GrowJuvenileAn }
			case CA: { GrowJuvenileCa }
			case SB: { GrowJuvenileSb }
			case TT: { GrowJuvenileTt }
		}
	}
	
	def GrowJuvenileAn() {
		StemDiameter = StemDiameter + (-0.068 * StemDiameter + 0.9) / DaysWithLeaves * growthBoosterByClimate
	}
	
	def GrowJuvenileCa() {
		StemDiameter = StemDiameter + (-0.068 * StemDiameter + 1.2) / DaysWithLeaves * growthBoosterByClimate
	}
	
	def GrowJuvenileSb() {
		StemDiameter = StemDiameter + (-0.068 * StemDiameter + 1.9) / DaysWithLeaves * growthBoosterByClimate
	}
	
	def GrowJuvenileTt() {
		StemDiameter = StemDiameter + (-0.068 * StemDiameter + 1.33) / DaysWithLeaves * growthBoosterByClimate
	}
		
	def GrowAdult(reduceFactor: real) {		
		switch (Species) {
			case AN: { GrowAdultAn(reduceFactor) }
			case CA: { GrowAdultCa(reduceFactor) }
			case SB: { GrowAdultSb(reduceFactor) }
			case TT: { GrowAdultTt(reduceFactor) }
		}
	}
	
	def GrowAdultAn(reduceFactor : real) {
		var maxStemDiameter = 20
		var growthRate = 1
		StemDiameter = StemDiameter + StemDiameterGrowthForAdult(maxStemDiameter, growthRate, reduceFactor)
	}
	
	def GrowAdultCa(reduceFactor : real) {
		var maxStemDiameter = 20
		var growthRate = 0.5
		StemDiameter = StemDiameter + StemDiameterGrowthForAdult(maxStemDiameter, growthRate, reduceFactor)	
	}
	
	def GrowAdultSb(reduceFactor : real) {
		var maxStemDiameter = 50
		var growthRate = 1
		StemDiameter = StemDiameter + StemDiameterGrowthForAdult(maxStemDiameter, growthRate, reduceFactor)	
	}
	
	def GrowAdultTt(reduceFactor : real) {
		var maxStemDiameter = 30
		var growthRate = 1
		StemDiameter = StemDiameter + StemDiameterGrowthForAdult(maxStemDiameter, growthRate, reduceFactor)		
	}
	
	def IsPopulationDensityExceeded() {			
		return IsTooCloseTo(TreeAgeGroup.Seed, ALL_SPECIES, 4) or 
				IsTooCloseTo(TreeAgeGroup.Seedling, ALL_SPECIES, 4) or 
				IsTooCloseTo(TreeAgeGroup.Juvenile, AN, 32) or 
				IsTooCloseTo(TreeAgeGroup.Juvenile, CA, 40) or 
				IsTooCloseTo(TreeAgeGroup.Juvenile, SB, 80) or 
				IsTooCloseTo(TreeAgeGroup.Juvenile, TT, 52) or 
				IsTooCloseTo(TreeAgeGroup.Adult, AN, 80) or
				IsTooCloseTo(TreeAgeGroup.Adult, CA, 80) or
				IsTooCloseTo(TreeAgeGroup.Adult, SB, 200) or
				IsTooCloseTo(TreeAgeGroup.Adult, TT, 120) 
	}
	
	def IsTooCloseTo(treeAgeGroup : TreeAgeGroup, species : string, minDistance : real) {
		var tree = nearest Tree where [x => return x.IsTreeAgeGroup(treeAgeGroup) and x.IsSpecies(species)] 
		return tree !== nil and DistanceTo(tree)  < minDistance
	}
	
	def DistanceTo(tree : Tree) {
		var constant = 111.3 // 110.75
		var lat = (tree.Ycor + ycor) / 2 * 0.01745
		var dx : real = constant * Math.Cos(lat) * (tree.Xcor - xcor)
		var dy : real = constant * ( tree.Ycor - ycor)
		return 1000 * Math.Sqrt(dx * dx + dy * dy)
	}
	
	def StemDiameterGrowthForAdult(maxStemDiameter : real, growthRate : real, reduceFactor : real) {
		return ( 1 - StemDiameter / maxStemDiameter ) * growthRate / DaysWithLeaves * reduceFactor * growthBoosterByClimate
	}
	
 	def CalculateLivingWoodMassByDiameter() : real { 		
 		if (MyTreeAgeGroup === TreeAgeGroup.Seed or MyTreeAgeGroup === TreeAgeGroup.Seedling) {
 			return 0
 		}		
		switch (Species) {
			case AN: { return E ** (-3.55 + 3.060 * Math.Log(StemDiameter)) / 0.6 }
			case CA: { return E ** (-3.27 + 2.800 * Math.Log(StemDiameter)) / 0.6 }
			case SB: { return E ** (-3.35 + 2.620 * Math.Log(StemDiameter)) / 0.6 }
			case TT: { return E ** (-3.39 + 2.827 * Math.Log(StemDiameter)) / 0.6 }
		}
	}
		
  	def CalculateDiameterByWoodMass() : real { 				
		switch (Species) {
			case AN: { return E ** ((3.55 + Math.Log(LivingWoodMass * 0.6)) / 3.060) }
			case CA: { return E ** ((3.27 + Math.Log(LivingWoodMass * 0.6)) / 2.800) }
			case SB: { return E ** ((3.35 + Math.Log(LivingWoodMass * 0.6)) / 2.620) }
			case TT: { return E ** ((3.39 + Math.Log(LivingWoodMass * 0.6)) / 2.827) }
		}
	}
	
	def GenerateDeadwoodMass() {
		return 0.017 * LivingWoodMass / DaysPerYear
	}
	
	def Die(reason : string) {
		DyingReason = reason
		MyTreeAgeGroup = TreeAgeGroup.Death	
		kill me
	}
		
	def ResetDamageType() {
		MyDamageType = DamageType.No	 
	}	
		
	def ResetBarkBy(percent : real) {
		Bark = Bark + Bark * percent / 100.0
		if (Bark > 1.0) {
			Bark = 1.0
		}
	}	
	
	def InitWoodMass() {
		LivingWoodMass = CalculateLivingWoodMassByDiameter
		DeadWoodMass = 0.017 * LivingWoodMass
	}

	def UpdateWoodMass() {
		LivingWoodMass = CalculateLivingWoodMassByDiameter
		DeadWoodMass = DeadWoodMass + GenerateDeadwoodMass
	}
	
	static def Reduce(growthrate : real, min : integer, max : integer) {
		return growthrate * (min + RandomBetween(min, max)) / 100 
	}
        
	static def RandomPropabilitySmallenThan(percentage : integer) {
		return random(100) < percentage
	}
	
	static def RandomBetween(min : integer, max : integer) : real {
		return random(max + 1 - min) + min 
	}
	
	static def ReducedTo(minPercentage : integer, maxPercentag : integer) : real {
		return RandomBetween(minPercentage, maxPercentag) / 100
	}
	
    def GetRelativePosition(originLongitude : real, originLatitude : real, bearing : real, distanceInM  : real)  {
    	var DegreesToRadians : real = PI / 180.0
    	var RadiansToDegrees : real = 180.0 / PI
    	var latA : real = DegreesToRadians * originLatitude
    	var lonA : real = originLongitude * DegreesToRadians

    	var radBearing = bearing * DegreesToRadians
		var cosB : real = Math.Cos(distanceInM / EarthRadiusInMeters)
		var cosLatB : real =  Math.Cos(latA)

		var SinLatA : real = Math.Sin(latA)
		var sinB : real = Math.Sin(distanceInM / EarthRadiusInMeters)
		var cosBearing : real = Math.Cos(radBearing)
		var temp1 : real = SinLatA * cosB 
		var temp2 : real = 0
       	var lat = Math.Asin(temp1 + cosLatB * sinB * cosBearing)
		var SinLat : real = Math.Sin(lat)
       	var sindBearing : real = Math.Sin(radBearing)
      
       	var atan1 : real = sindBearing * Math.Sin(distanceInM / EarthRadiusInMeters) * Math.Cos(latA)
       	
       	var cosDistance = Math.Cos(distanceInM / EarthRadiusInMeters)
       	var atan2 : real = cosDistance - SinLatA * SinLat
		var lon = lonA + Math.Atan2(atan1, atan2)

		var latResult : real = lat * RadiansToDegrees
		var lonResult : real = lon * RadiansToDegrees
		
		return #(lonResult, latResult)
     }
}
